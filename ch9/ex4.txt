Will it blow up?

1. [x^y | x <- [1..5], y <- [2, undefined]]

It will blow up. Entering it at the interactive prompt will force the entire
list to be printed. Hence, it will print "[1," and then fail.

2. take 1 $ [x^y | x <- [1..5], y <- [2, undefined]]

It will not blow up. It will return [1].

3. sum [1, undefined, 3]

It will blow up.

4. length [1, 2, undefined]

It will not blow up. It will return 3.

5. length $ [1, 2, 3] ++ undefined

It will blow up since part of the spine is bottom.

6. take 1 $ filter even [1, 2, 3, undefined]

It will not blow up. It will return [2].

7. take 1 $ filter even [1, 3, undefined]

It will blow up since it will evaluate every element of the list looking for an
even value.

8. take 1 $ filter odd [1, 3, undefined]

It will not blow up. It will return [1].

9. take 2 $ filter odd [1, 3, undefined]

It will not blow up. It will return [1, 3].

10. take 3 $ filter odd [1, 3, undefined]

It will blow up since it will attempt to evaluate undefined when looking for
the 3rd odd value.

Is it in normal form?

Remember that an expression cannot be in normal form or weak head normal form if
the outermost part of the expression isn't a data constructor. It can't be in
normal form if any part of the expression is unevaluated.

1. [1, 2, 3, 4, 5]. NF, since all the values are fully evaluated

2. 1 : 2 : 3 : 4 : _. WHNF, since the outermost part ":" is a data constructor
and it hasn't been fully evaluated.

Note: 1 : 2 : 3 : 4 : _ == (:) 1 ((:) 2 ((:) 3 ((:) 4 _)))

3. enumFromTo 1 10. Neither, since the outermost part "enumFromTo" is not a
data constructor and it hasn't been fully evaluated.

4. length [1, 2, 3, 4, 5]. Neither, since the outermost part "length" is not a
data constructor and it hasn't been fully evaluated.

5. sum (enumFromTo 1 10). Neither, since the outermost part "sum" is not a data
constructor and it hasn't been fully evaluated.

6. ['a'..'m'] ++ ['n'..'z']. Neither, since the outermost part "++" is not a
data constructor and it hasn't been fully evaluated.

Note: ['a'..'m'] ++ ['n'..'z'] == (++) ['a'..'m'] ['n'..'z']

7. (_, 'b'). WHNF, since the outermost part "," is a data constructor and it
hasn't been fully evaluated.

Note: (_, 'b') == (,) _ 'b'
