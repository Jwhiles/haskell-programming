1. take 1 $ map (+1) [undefined, 2, 3]

It will be bottom. `take 1` forces the 1st value out of the list and so we'd
end up applying `(+1)` to `undefined`.

2. take 1 $ map (+1) [1, undefined, 3]

This will return the value [2].

3. take 2 $ map (+1) [1, undefined, 3]

It will be bottom. `take 2` will cause the 2nd value to be forced and so we'd
end up applying `(+1)` to `undefined`.

4. itIsMystery xs = map (\x -> elem x "aeiou") xs

itIsMystery :: [Char] -> [Bool]
itIsMystery returns a list of Bool such that an element is True iff it is a
vowel.

For e.g. test it with itIsMystery ['a'..'z'].

5.

a) map (^2) [1..10] = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

b) map minimum [[1..10], [10..20], [20..30]] = [1, 10, 20]

c) map sum [[1..5], [1..5], [1..5]] = [15, 15, 15]

6.

Prelude> import Data.Bool
Prelude Data.Bool> map (\x -> bool x (-x) (x == 3)) [1..10]
